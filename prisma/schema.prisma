// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id              String   @id @default(cuid())
  email           String?  
  name            String
  gender          String
  dob             String
  aadharno        String @unique
  bloodgroup      String
  hashedPassword  String?
  contactno       String
  alternatecontactno String?
  address         String
  emergencycontact String?
  prevHis          String?
  imageUrl         String?
  isVerified Boolean? @default(false)
  medHis          MedicalHistory[]
  session         PatientSession[]
  queue Queue[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
model MedicalHistory{
  id        String   @id
  userId    String
  condition String
  treatmentdetails String?
  patient Patient@relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
model PatientSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  patient Patient @relation(fields: [userId], references: [id])
}

model Hospital{
  id              String   @id @default(cuid())
  name String
  licenceno String
  estyear Int
  Website String
  contactno String
  alternatecontactno String
  email String
  address String
  City String
  State String
  Zipcode String 
  noofbeds Int
  noofopds Int
  nooficu Int
  nooflabs Int
  noofdoctorsregistered Int
  anyotherdetails String?
  hashedPassword  String?
  bedsAvailable Int? @default(0) //single beds
  opdsAvailable Int? @default(0) // opds
  icuAvailable Int? @default(0) //icu
  labsAvailable Int? @default(0) //labs
  doctorsAvailable Int? @default(0) //doctors 
  sharedAvailable Int? @default(0) //sharedbeds
  generalWardAvailable Int? @default(0)
  idToLogin String @unique
  isVerified Boolean @default(false)
  hospitaldep Department[]
  session HospitalSession[]
  room Room[]
  roomHistory HospitalRoomHistory[]
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
model Room{
  id              String   @id @default(cuid())
  userId String
  roomno String   
  isAvailabel Boolean @default(false)
  typeof String //icu general ward single room shared room 
  bookedby String? @default("Unbooked")
  aadhar String?
  hospital Hospital @relation(fields: [userId], references: [id])
  updatedAt       DateTime? @updatedAt
}
model HospitalRoomHistory{
  id              String   @id @default(cuid())
  userId String
  roomId String
  roomno String   
  typeof String 
  bookedBy String? @default("Unbooked")
  aadhar String?
  bookedAt DateTime 
  checkout DateTime?
  hospital Hospital @relation(fields: [userId], references: [id])
}
model Department{
  id              String   @id @default(cuid())
  userId String
  hod String
  name String
  noOfDoctors String
  doctorsAvailable String
  doctors DoctorinDept[]
  hospital Hospital @relation(fields: [userId], references: [id])
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
model Doctor{
  id              String   @id @default(cuid())
  userId String @unique//unique id to login 
  name String 
  imageUrl String?
  dob DateTime?
  aadharNo String?
  licenceNo String? //registed with Medical Council of India (MCI) or a State Medical Council 
  contactno String?
  email String?
  hashedPassword String
  queue Queue[]
  departments DoctorinDept[]
  session DoctorSession[]
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
model DoctorinDept {
  dept       Department     @relation(fields: [deptId], references: [id])
  deptId     String 
  doctor     Doctor @relation(fields: [doctorId], references: [id])
  doctorId   String 
  assignedAt DateTime @default(now())
  isAvailable Boolean? @default(true)
  @@id([deptId, doctorId])
}
model Queue{
  id              String   @id @default(cuid())
  userId String
  patientId String
  patient Patient@relation(fields: [patientId], references: [id])
  doctor Doctor @relation(fields: [userId], references: [id])
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}
model HospitalSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  hospital Hospital @relation(fields: [userId], references: [id])
}
model DoctorSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  doctor Doctor @relation(fields: [userId], references: [id])
}

model Feedback{ 
  id String @id @default(cuid())
  name String
  email String
  message String
  subject String?
  reply Reply[]
  createdAt       DateTime? @default(now())
}

model Reply{
  id String @id @default(cuid())
  userId String
  feedback Feedback @relation(fields: [userId], references: [id])
  message String
  createdAt       DateTime? @default(now())
}